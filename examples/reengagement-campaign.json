{
  "name": "Re-engagement Campaign",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 10 * * 1"
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Weekly Re-engagement Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [240, 300]
    },
    {
      "parameters": {
        "resource": "contact",
        "operation": "list",
        "limit": 1000
      },
      "id": "get-all-contacts",
      "name": "Get All Contacts",
      "type": "n8n-nodes-bayengage.bayEngage",
      "typeVersion": 1,
      "position": [460, 300],
      "credentials": {
        "bayEngageApi": {
          "id": "bayengage-credentials",
          "name": "BayEngage API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Identify inactive contacts for re-engagement\nconst contacts = items[0].json.data.contacts || [];\nconst currentDate = new Date();\nconst thirtyDaysAgo = new Date(currentDate.getTime() - (30 * 24 * 60 * 60 * 1000));\nconst sixtyDaysAgo = new Date(currentDate.getTime() - (60 * 24 * 60 * 60 * 1000));\n\nconst inactiveContacts = contacts.filter(contact => {\n  const lastEngagement = contact.last_engagement_date ? new Date(contact.last_engagement_date) : null;\n  const signupDate = contact.created_at ? new Date(contact.created_at) : null;\n  \n  // Skip if no engagement data\n  if (!lastEngagement) return false;\n  \n  // Must be at least 30 days old\n  if (signupDate && signupDate > thirtyDaysAgo) return false;\n  \n  // No engagement in last 30 days\n  const daysSinceEngagement = Math.floor((currentDate - lastEngagement) / (1000 * 60 * 60 * 24));\n  \n  return daysSinceEngagement >= 30;\n}).map(contact => {\n  const lastEngagement = contact.last_engagement_date ? new Date(contact.last_engagement_date) : null;\n  const daysSinceEngagement = lastEngagement ? Math.floor((currentDate - lastEngagement) / (1000 * 60 * 60 * 24)) : 999;\n  \n  // Categorize by inactivity level\n  let reengagementType = 'standard';\n  if (daysSinceEngagement >= 90) reengagementType = 'urgent';\n  else if (daysSinceEngagement >= 60) reengagementType = 'moderate';\n  \n  return {\n    contact_id: contact.id,\n    email: contact.email,\n    first_name: contact.first_name,\n    last_name: contact.last_name,\n    days_since_engagement: daysSinceEngagement,\n    reengagement_type: reengagementType,\n    last_engagement_date: contact.last_engagement_date,\n    signup_date: contact.created_at\n  };\n});\n\nreturn [{\n  json: {\n    analysis_date: currentDate.toISOString().split('T')[0],\n    total_contacts: contacts.length,\n    inactive_count: inactiveContacts.length,\n    inactive_contacts: inactiveContacts,\n    urgent_count: inactiveContacts.filter(c => c.reengagement_type === 'urgent').length,\n    moderate_count: inactiveContacts.filter(c => c.reengagement_type === 'moderate').length,\n    standard_count: inactiveContacts.filter(c => c.reengagement_type === 'standard').length\n  }\n}];"
      },
      "id": "identify-inactive-contacts",
      "name": "Identify Inactive Contacts",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.inactive_count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-has-inactive",
      "name": "Filter Has Inactive Contacts",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "// Create personalized re-engagement campaigns based on inactivity level\nconst inactiveContacts = items[0].json.inactive_contacts;\n\nconst campaigns = inactiveContacts.map(contact => {\n  let subjectLine, offerText, urgencyLevel;\n  \n  switch (contact.reengagement_type) {\n    case 'urgent':\n      subjectLine = `We miss you, ${contact.first_name}! 50% off everything üö®`;\n      offerText = '50% OFF EVERYTHING';\n      urgencyLevel = 'high';\n      break;\n    case 'moderate':\n      subjectLine = `Come back, ${contact.first_name}! 30% off your next order`;\n      offerText = '30% OFF';\n      urgencyLevel = 'medium';\n      break;\n    default:\n      subjectLine = `We'd love to see you again, ${contact.first_name}!`;\n      offerText = '20% OFF';\n      urgencyLevel = 'low';\n  }\n  \n  return {\n    contact_id: contact.contact_id,\n    email: contact.email,\n    first_name: contact.first_name,\n    last_name: contact.last_name,\n    days_since_engagement: contact.days_since_engagement,\n    reengagement_type: contact.reengagement_type,\n    subject_line: subjectLine,\n    offer_text: offerText,\n    urgency_level: urgencyLevel,\n    discount_code: `REENGAGE${contact.reengagement_type.toUpperCase()}`\n  };\n});\n\nreturn campaigns.map(campaign => ({ json: campaign }));"
      },
      "id": "create-personalized-campaigns",
      "name": "Create Personalized Campaigns",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "resource": "template",
        "operation": "create",
        "templateName": "Re-engagement - {{ $json.urgency_level }} - {{ $json.first_name }}",
        "templateContent": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>We Miss You!</title>\n</head>\n<body>\n    <div style=\"max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;\">\n        <h1 style=\"color: #dc3545;\">We Miss You, {{ $json.first_name }}! üò¢</h1>\n        <p>It's been {{ $json.days_since_engagement }} days since we last heard from you, and we're genuinely concerned we might be losing you.</p>\n        \n        <div style=\"background-color: #fff3cd; padding: 20px; margin: 20px 0; border-left: 4px solid #ffc107;\">\n            <h2>üéÅ Special Comeback Offer</h2>\n            <p>As a valued member, we're offering you an exclusive <strong>{{ $json.offer_text }}</strong> on your next purchase!</p>\n            <p><strong>Use code: {{ $json.discount_code }}</strong></p>\n            <p><small>This offer is valid for 7 days only</small></p>\n        </div>\n        \n        <div style=\"background-color: #f8f9fa; padding: 20px; margin: 20px 0;\">\n            <h3>What's New Since You Left?</h3>\n            <ul>\n                <li>New features and improvements</li>\n                <li>Updated content and resources</li>\n                <li>Community highlights and success stories</li>\n                <li>Special events and webinars</li>\n            </ul>\n        </div>\n        \n        <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"https://example.com/comeback?code={{ $json.discount_code }}\" style=\"background-color: #dc3545; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold;\">Come Back Now</a>\n        </div>\n        \n        <div style=\"background-color: #e3f2fd; padding: 20px; margin: 20px 0; border-radius: 8px;\">\n            <h3>üí¨ We Want to Hear From You</h3>\n            <p>Did something go wrong? Is there anything we can do better? Reply to this email and let us know - we're here to help!</p>\n        </div>\n        \n        <p>We'd love to have you back as part of our community.</p>\n        <p>Best regards,<br>The Customer Success Team</p>\n    </div>\n</body>\n</html>"
      },
      "id": "create-reengagement-template",
      "name": "Create Re-engagement Template",
      "type": "n8n-nodes-bayengage.bayEngage",
      "typeVersion": 1,
      "position": [1340, 300],
      "credentials": {
        "bayEngageApi": {
          "id": "bayengage-credentials",
          "name": "BayEngage API"
        }
      }
    },
    {
      "parameters": {
        "resource": "campaign",
        "operation": "create",
        "campaignName": "Re-engagement - {{ $json.first_name }} {{ $json.last_name }}",
        "campaignSubject": "={{ $json.subject_line }}",
        "campaignContent": "={{ $json.template_content }}",
        "recipientList": "reengagement-list"
      },
      "id": "create-reengagement-campaign",
      "name": "Create Re-engagement Campaign",
      "type": "n8n-nodes-bayengage.bayEngage",
      "typeVersion": 1,
      "position": [1560, 300],
      "credentials": {
        "bayEngageApi": {
          "id": "bayengage-credentials",
          "name": "BayEngage API"
        }
      }
    },
    {
      "parameters": {
        "resource": "campaign",
        "operation": "send",
        "campaignId": "={{ $json.campaign_id }}"
      },
      "id": "send-reengagement-campaign",
      "name": "Send Re-engagement Campaign",
      "type": "n8n-nodes-bayengage.bayEngage",
      "typeVersion": 1,
      "position": [1780, 300],
      "credentials": {
        "bayEngageApi": {
          "id": "bayengage-credentials",
          "name": "BayEngage API"
        }
      }
    },
    {
      "parameters": {
        "channel": "#customer-success",
        "text": "Re-engagement Campaign Sent: {{ $json.inactive_count }} inactive contacts",
        "blocks": [
          {
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": "*üîÑ Re-engagement Campaign Sent*\n\n*Analysis Date:* {{ $json.analysis_date }}\n*Total Contacts:* {{ $json.total_contacts }}\n*Inactive Contacts:* {{ $json.inactive_count }}\n\n*Breakdown:*\n‚Ä¢ Urgent (90+ days): {{ $json.urgent_count }}\n‚Ä¢ Moderate (60-89 days): {{ $json.moderate_count }}\n‚Ä¢ Standard (30-59 days): {{ $json.standard_count }}\n\n*Timestamp:* {{ new Date().toISOString() }}"
            }
          }
        ]
      },
      "id": "slack-notification",
      "name": "Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [2000, 300],
      "credentials": {
        "slackApi": {
          "id": "slack-credentials",
          "name": "Slack API"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms",
          "mode": "id"
        },
        "sheetName": "Re-engagement Analysis",
        "columnToMatchOn": "Analysis Date",
        "valueToMatchOn": "={{ $json.analysis_date }}",
        "valuesToSend": "defineInNode",
        "fieldsUi": {
          "values": [
            {
              "column": "Analysis Date",
              "fieldValue": "={{ $json.analysis_date }}"
            },
            {
              "column": "Total Contacts",
              "fieldValue": "={{ $json.total_contacts }}"
            },
            {
              "column": "Inactive Count",
              "fieldValue": "={{ $json.inactive_count }}"
            },
            {
              "column": "Urgent Count",
              "fieldValue": "={{ $json.urgent_count }}"
            },
            {
              "column": "Moderate Count",
              "fieldValue": "={{ $json.moderate_count }}"
            },
            {
              "column": "Standard Count",
              "fieldValue": "={{ $json.standard_count }}"
            },
            {
              "column": "Analysis Timestamp",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "log-reengagement-analysis",
      "name": "Log Re-engagement Analysis",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [2220, 300],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-credentials",
          "name": "Google Sheets OAuth2"
        }
      }
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "track",
        "eventName": "reengagement_campaign_sent",
        "eventProperties": {
          "properties": [
            {
              "name": "inactive_count",
              "value": "={{ $json.inactive_count }}"
            },
            {
              "name": "urgent_count",
              "value": "={{ $json.urgent_count }}"
            },
            {
              "name": "moderate_count",
              "value": "={{ $json.moderate_count }}"
            },
            {
              "name": "standard_count",
              "value": "={{ $json.standard_count }}"
            }
          ]
        }
      },
      "id": "track-reengagement-event",
      "name": "Track Re-engagement Event",
      "type": "n8n-nodes-bayengage.bayEngage",
      "typeVersion": 1,
      "position": [2440, 300],
      "credentials": {
        "bayEngageApi": {
          "id": "bayengage-credentials",
          "name": "BayEngage API"
        }
      }
    }
  ],
  "connections": {
    "schedule-trigger": {
      "main": [
        [
          {
            "node": "get-all-contacts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-all-contacts": {
      "main": [
        [
          {
            "node": "identify-inactive-contacts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "identify-inactive-contacts": {
      "main": [
        [
          {
            "node": "filter-has-inactive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter-has-inactive": {
      "main": [
        [
          {
            "node": "create-personalized-campaigns",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-personalized-campaigns": {
      "main": [
        [
          {
            "node": "create-reengagement-template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-reengagement-template": {
      "main": [
        [
          {
            "node": "create-reengagement-campaign",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-reengagement-campaign": {
      "main": [
        [
          {
            "node": "send-reengagement-campaign",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-reengagement-campaign": {
      "main": [
        [
          {
            "node": "slack-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "slack-notification": {
      "main": [
        [
          {
            "node": "log-reengagement-analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "log-reengagement-analysis": {
      "main": [
        [
          {
            "node": "track-reengagement-event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["reengagement", "win-back", "retention", "lifecycle"],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}
